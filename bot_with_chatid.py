import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardRemove
from aiogram.filters import Command
import os
from datetime import datetime
import re

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
import os
# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    raise ValueError('TELEGRAM_BOT_TOKEN environment variable is required')

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_CHAT_ID
ADMIN_CHAT = os.getenv('ADMIN_CHAT_ID')
if not ADMIN_CHAT:
    raise ValueError('ADMIN_CHAT_ID environment variable is required')
ADMIN_CHAT = int(ADMIN_CHAT)

# –§—É–Ω–∫—Ü–∏—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
def sanitize_log_input(text):
    if not text:
        return text
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    return re.sub(r'[\r\n\t\x00-\x1f\x7f-\x9f]', ' ', str(text))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
general_logger = logging.getLogger('general')
applicants_logger = logging.getLogger('applicants')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤
general_handler = logging.FileHandler('bot_general.log', encoding='utf-8')
applicants_handler = logging.FileHandler('bot_applicants.log', encoding='utf-8')

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
file_formatter = logging.Formatter('%(asctime)s - %(message)s')
general_handler.setFormatter(file_formatter)
applicants_handler.setFormatter(file_formatter)

general_logger.addHandler(general_handler)
applicants_logger.addHandler(applicants_handler)
general_logger.setLevel(logging.INFO)
applicants_logger.setLevel(logging.INFO)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–∞–≤—à–∏—Ö –∑–∞—è–≤–∫—É
applicants = set()

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# ==== INLINE –ö–ù–û–ü–ö–ò ====
start_inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply")],
    [InlineKeyboardButton(text="–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data="not_interested")]
])

send_inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_form")]
])

# ==== /start ====
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} (@{sanitize_log_input(message.from_user.username)}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –û–±—â–∏–π –ª–æ–≥
    general_logger.info(f"–ó–ê–ü–†–û–°: /start –æ—Ç {message.from_user.id} (@{sanitize_log_input(message.from_user.username) or 'None'}) {sanitize_log_input(message.from_user.first_name) or ''} {sanitize_log_input(message.from_user.last_name) or ''}")
    
    text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –ø—Ä–æ—è–≤–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —É—á–∞—Å—Ç–∏—é "
        "–≤ —Ñ–æ–∫—É—Å-–≥—Ä—É–ø–ø–µ Divan.Online.\n"
        "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –Ω–∏–∂–µ, "
        "—á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å–ø–æ–∫–æ–π–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ.\n\n"
        "–° —Ç–µ–ø–ª–æ–º,\n–ö–æ–º–∞–Ω–¥–∞ divan online https://divan.online/"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await message.answer(text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    doc_path = "–£—Å–ª–æ–≤–∏—è_—É—á–∞—Å—Ç–∏—è_–ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤_–≤_—Ñ–æ–∫—É—Å_–≥—Ä—É–ø–ø–µ.docx"
    if os.path.exists(doc_path):
        try:
            doc = FSInputFile(doc_path)
            await message.answer_document(document=doc)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {sanitize_log_input(str(e))}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=start_inline_kb)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("", reply_markup=ReplyKeyboardRemove())
    
    # –û–±—â–∏–π –ª–æ–≥ –æ—Ç–≤–µ—Ç–∞
    general_logger.info(f"–û–¢–í–ï–¢: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

# ==== –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id ====
@dp.message(Command("id"))
async def get_chat_id(message: types.Message):
    chat_info = (
        f"–í–∞—à chat_id: {message.from_user.id}\n"
        f"Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ò–º—è: {message.from_user.first_name or ''} {message.from_user.last_name or ''}"
    )
    await message.answer(chat_info)
    logger.info(f"Chat ID –∑–∞–ø—Ä–æ—Å: {sanitize_log_input(chat_info)}")
    
    # –û–±—â–∏–π –ª–æ–≥
    general_logger.info(f"–ó–ê–ü–†–û–°: /id –æ—Ç {message.from_user.id} (@{sanitize_log_input(message.from_user.username) or 'None'})")
    general_logger.info(f"–û–¢–í–ï–¢: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

# ==== –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" ====
@dp.callback_query(F.data == "apply")
async def process_apply(callback: types.CallbackQuery):
    user_data[callback.from_user.id] = {"text": ""}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞–≤—à–∏—Ö –∑–∞—è–≤–∫—É
    applicants.add(callback.from_user.id)
    
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n1. –§–ò–û\n2. –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏\n3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'.",
        reply_markup=send_inline_kb
    )
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    general_logger.info(f"–ó–ê–ü–†–û–°: –ö–Ω–æ–ø–∫–∞ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É' –æ—Ç {callback.from_user.id} (@{sanitize_log_input(callback.from_user.username) or 'None'})")
    general_logger.info(f"–û–¢–í–ï–¢: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    
    applicants_logger.info(f"–ù–ê–ß–ê–õ–û –ó–ê–Ø–í–ö–ò: ID={callback.from_user.id}, Username=@{sanitize_log_input(callback.from_user.username) or 'None'}, –ò–º—è={sanitize_log_input(callback.from_user.first_name) or ''} {sanitize_log_input(callback.from_user.last_name) or ''}")

# ==== –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" ====
@dp.callback_query(F.data == "send_form")
async def process_send(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id, {}).get("text", "").strip()
    
    if not data:
        await callback.message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
            "1. –§–ò–û\n"
            "2. –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏\n"
            "3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            "–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' —Å–Ω–æ–≤–∞.",
            reply_markup=send_inline_kb
        )
        await callback.answer("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_text = (
        f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ–∫—É—Å-–≥—Ä—É–ø–ø–µ\n\n"
        f"üë§ Username: @{callback.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üë§ –ò–º—è: {callback.from_user.first_name or ''} {callback.from_user.last_name or ''}\n\n"
        f"üìù –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n{data}"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_CHAT, admin_text)
        logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {ADMIN_CHAT}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.pop(user_id, None)
        
        logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        general_logger.info(f"–û–¢–í–ï–¢: –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç {user_id}")
        applicants_logger.info(f"–ó–ê–Ø–í–ö–ê –û–¢–ü–†–ê–í–õ–ï–ù–ê: ID={user_id}, Username=@{sanitize_log_input(callback.from_user.username) or 'None'}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –æ—Ç {user_id}: {sanitize_log_input(str(e))}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ª–æ–≥ –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞: {sanitize_log_input(admin_text)}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–¥—É–º–∞–ª, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å)
        await callback.message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: divanonline1@gmail.com"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.pop(user_id, None)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        general_logger.info(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –æ—Ç {user_id}")
        applicants_logger.info(f"–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò: ID={user_id}, Username=@{sanitize_log_input(callback.from_user.username) or 'None'}")
    
    await callback.answer()

# ==== –ö–Ω–æ–ø–∫–∞ "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç" ====
@dp.callback_query(F.data == "not_interested")
async def process_not_interested(callback: types.CallbackQuery):
    final_text = (
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏ —É—Å–ª–æ–≤–∏—è–º–∏ —Ñ–æ–∫—É—Å-–≥—Ä—É–ø–ø—ã.\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Divan.Online –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤ –±—É–¥—É—â–µ–º —É –Ω–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ.\n\n"
        "–ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–æ–∫—É—Å-–≥—Ä—É–ø–ø—ã –≤–∞–º –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç–µ:\n\n"
        "‚Äî –†–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "‚Äî –ü—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç–∞—Ö\n"
        "‚Äî –ü–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏\n\n"
        "–î–≤–µ—Ä–∏ Divan.Online –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –≤–∞—Å.\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        "–° —Ç–µ–ø–ª–æ–º –∏ —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ Divan.Online\n"
        "–ü–æ—á—Ç–∞: divanonline1@gmail.com"
    )
    await callback.message.answer(final_text)
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    general_logger.info(f"–ó–ê–ü–†–û–°: –ö–Ω–æ–ø–∫–∞ '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç' –æ—Ç {callback.from_user.id} (@{sanitize_log_input(callback.from_user.username) or 'None'})")
    general_logger.info(f"–û–¢–í–ï–¢: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")

# ==== –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã ====
@dp.message(F.text)
async def collect_data(message: types.Message):
    user_id = message.from_user.id
    
    # –û–±—â–∏–π –ª–æ–≥ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    general_logger.info(f"–ó–ê–ü–†–û–°: –¢–µ–∫—Å—Ç –æ—Ç {user_id} (@{sanitize_log_input(message.from_user.username) or 'None'}): {sanitize_log_input(message.text)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    if user_id in user_data:
        prev_text = user_data[user_id].get("text", "")
        
        if prev_text:
            user_data[user_id]["text"] = prev_text + "\n" + message.text
        else:
            user_data[user_id]["text"] = message.text
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        await message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏.",
            reply_markup=send_inline_kb
        )
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∏—Ç–µ–ª–µ–π
        applicants_logger.info(f"–î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò: ID={user_id}, Username=@{sanitize_log_input(message.from_user.username) or 'None'}, –°–æ–æ–±—â–µ–Ω–∏–µ: {sanitize_log_input(message.text)}")
        general_logger.info(f"–û–¢–í–ï–¢: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id}")
    else:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É
        general_logger.info(f"–û–¢–í–ï–¢: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è {user_id}")

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ====
@dp.error()
async def error_handler(event, exception):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {sanitize_log_input(str(exception))}")
    return True

# ==== –ó–∞–ø—É—Å–∫ ====
async def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{sanitize_log_input(me.username)}")
        logger.info(f"–ê–¥–º–∏–Ω —á–∞—Ç: {ADMIN_CHAT}")
        
        # –û—á–∏—â–∞–µ–º webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {sanitize_log_input(str(e))}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {sanitize_log_input(str(e))}")